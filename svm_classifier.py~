import numpy as np
from sklearn.svm import SVC
from sklearn.cross_validation import StratifiedKFold
from string import punctuation

def determine_svm_performance(clf, PHI, t, k=5):
    from sklearn import cross_validation
    from sklearn import metrics
    skf = cross_validation.StratifiedKFold(t,k)
    avg_perfs = []
    avg_perf=np.float64()
    for train, test in skf :
        PHI_train = PHI[train]
        PHI_test = PHI[test]
        t_train = t[train]
        t_test = t[test]
        clf.fit(PHI_train,t_train)
        t_pred = clf.decision_function(PHI_test)
        # uses accuracy metric
        t_pred_binary = [ np.sign(t_i) for t_i in t_pred ]
        perf = metrics.accuracy_score(t_test, t_pred_binary)
        avg_performances.append(perf)
    avg_perf = np.mean(avg_performances)
    return avg_perf

# print "train: " + str(train)
# print "PHI_train: " + str(PHI_train)
# print "t_train: " + str(t_train)

def select_svm_c(PHI, t, k=5):
    cs = [ 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2 ]
    accuracies = []
    for c in cs:
        clf = SVC(kernel='linear',C=c)
        acc = determine_svm_performance(clf,PHI,t,k,metric)
        print "c: " + str(c) + ", acc: " + str(acc)
        accuracies.append(acc)
    best_c = max(scores, key = lambda x: x[1])

    # best_acc = accuracies[0]
    # best_acc_index = 0
    # for i in range(0,len(accuracies)) :
    #     if accuracies[i] > best_acc :
    #         best_acc = accuracies[i]
    #         best_acc_index = i
    # print "best acc: " + str(best_acc) + ", best_C: " + str(cs[best_acc_index])
    # best_C = cs[best_acc_index]

    return best_c[0]


def load_data(fnamex, fnamey) :
    data = np.loadtxt(fnamex)
              
def main():
    fnamex = 'debug_x_train.dat'
    load_data(fnamex);
    
main()
